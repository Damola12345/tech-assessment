
controller:
  service:
    enabled: true
    appProtocol: true

    annotations:
        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: ssl
        service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
        service.beta.kubernetes.io/aws-load-balancer-type: nlb
        service.beta.kubernetes.io/aws-load-balancer-name: "toyeGlobal-lb"
        service.beta.kubernetes.io/aws-load-balancer-subnets: subnet-0fxx, subnet-0xx
        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
        service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
        # Access Control
        service.beta.kubernetes.io/load-balancer-source-ranges: 0.0.0.0/0
        service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
        # AWS Resource Tags
        service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=prod,Team=devops
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
        nginx.ingress.kubernetes.io/configuration-snippet: |
          if ($http_x_forwarded_proto != 'https') {
           return 301 https://$host$request_uri;
          }

    externalTrafficPolicy: "Cluster"
    labels:
      env: globaltoye
  metrics:
    port: 10254
    portName: metrics
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"

      labels:
        app.kubernetes.io/owner: "devops"
        app.kubernetes.io/app: "nginx-ingress-controller"
        env: "globaltoye"
      externalIPs: ""
      loadBalancerSourceRanges: ""
      servicePort: 10254
      type: ClusterIP
    serviceMonitor:
      enabled: true
      selectorLabels:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
        app.kubernetes.io/app: "nginx-ingress-controller"
      additionalLabels:
        release: "prometheus"
